
assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080026c4  080026c4  000126c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026ec  080026ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026ec  080026ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026ec  080026ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026ec  080026ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002700  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002700  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a650  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019eb  00000000  00000000  0002a685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002c070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  0002cc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c68  00000000  00000000  0002d778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb49  00000000  00000000  000443e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000866b3  00000000  00000000  0004ff29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d65dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003164  00000000  00000000  000d662c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026ac 	.word	0x080026ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080026ac 	.word	0x080026ac

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
int main(void)
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000158:	f000 fab4 	bl	80006c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015c:	f000 f848 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000160:	f000 f8fe 	bl	8000360 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000164:	f000 f8d2 	bl	800030c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000168:	f000 f884 	bl	8000274 <MX_TIM2_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(LED_1_0_GPIO_Port, LED_1_0_Pin, 1);
 800016c:	2201      	movs	r2, #1
 800016e:	2108      	movs	r1, #8
 8000170:	481d      	ldr	r0, [pc, #116]	; (80001e8 <main+0x9c>)
 8000172:	f000 fe6f 	bl	8000e54 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_1_GPIO_Port, LED_1_1_Pin, 1);
 8000176:	2201      	movs	r2, #1
 8000178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800017c:	481b      	ldr	r0, [pc, #108]	; (80001ec <main+0xa0>)
 800017e:	f000 fe69 	bl	8000e54 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000182:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000186:	f000 faff 	bl	8000788 <HAL_Delay>

	  HAL_GPIO_WritePin(LED_1_0_GPIO_Port, LED_1_0_Pin, 0);
 800018a:	2200      	movs	r2, #0
 800018c:	2108      	movs	r1, #8
 800018e:	4816      	ldr	r0, [pc, #88]	; (80001e8 <main+0x9c>)
 8000190:	f000 fe60 	bl	8000e54 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_1_GPIO_Port, LED_1_1_Pin, 0);
 8000194:	2200      	movs	r2, #0
 8000196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800019a:	4814      	ldr	r0, [pc, #80]	; (80001ec <main+0xa0>)
 800019c:	f000 fe5a 	bl	8000e54 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80001a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a4:	f000 faf0 	bl	8000788 <HAL_Delay>

	  HAL_GPIO_WritePin(LED_1_0_GPIO_Port, LED_1_0_Pin, 1);
 80001a8:	2201      	movs	r2, #1
 80001aa:	2108      	movs	r1, #8
 80001ac:	480e      	ldr	r0, [pc, #56]	; (80001e8 <main+0x9c>)
 80001ae:	f000 fe51 	bl	8000e54 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_1_GPIO_Port, LED_1_1_Pin, 0);
 80001b2:	2200      	movs	r2, #0
 80001b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001b8:	480c      	ldr	r0, [pc, #48]	; (80001ec <main+0xa0>)
 80001ba:	f000 fe4b 	bl	8000e54 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80001be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001c2:	f000 fae1 	bl	8000788 <HAL_Delay>

	  HAL_GPIO_WritePin(LED_1_0_GPIO_Port, LED_1_0_Pin, 0);
 80001c6:	2200      	movs	r2, #0
 80001c8:	2108      	movs	r1, #8
 80001ca:	4807      	ldr	r0, [pc, #28]	; (80001e8 <main+0x9c>)
 80001cc:	f000 fe42 	bl	8000e54 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_1_GPIO_Port, LED_1_1_Pin, 1);
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d6:	4805      	ldr	r0, [pc, #20]	; (80001ec <main+0xa0>)
 80001d8:	f000 fe3c 	bl	8000e54 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80001dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e0:	f000 fad2 	bl	8000788 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_1_0_GPIO_Port, LED_1_0_Pin, 1);
 80001e4:	e7c2      	b.n	800016c <main+0x20>
 80001e6:	bf00      	nop
 80001e8:	40010c00 	.word	0x40010c00
 80001ec:	40010800 	.word	0x40010800

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b090      	sub	sp, #64	; 0x40
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	2228      	movs	r2, #40	; 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f002 fa4c 	bl	800269c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000212:	2302      	movs	r3, #2
 8000214:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021a:	2310      	movs	r3, #16
 800021c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021e:	2302      	movs	r3, #2
 8000220:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000222:	2300      	movs	r3, #0
 8000224:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000226:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800022a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022c:	f107 0318 	add.w	r3, r7, #24
 8000230:	4618      	mov	r0, r3
 8000232:	f000 fe49 	bl	8000ec8 <HAL_RCC_OscConfig>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800023c:	f000 f930 	bl	80004a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000240:	230f      	movs	r3, #15
 8000242:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000244:	2302      	movs	r3, #2
 8000246:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800024c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	2102      	movs	r1, #2
 800025a:	4618      	mov	r0, r3
 800025c:	f001 f8b6 	bl	80013cc <HAL_RCC_ClockConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000266:	f000 f91b 	bl	80004a0 <Error_Handler>
  }
}
 800026a:	bf00      	nop
 800026c:	3740      	adds	r7, #64	; 0x40
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800027a:	f107 0308 	add.w	r3, r7, #8
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000288:	463b      	mov	r3, r7
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000290:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <MX_TIM2_Init+0x94>)
 8000292:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000296:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000298:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <MX_TIM2_Init+0x94>)
 800029a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800029e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002a0:	4b19      	ldr	r3, [pc, #100]	; (8000308 <MX_TIM2_Init+0x94>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80002a6:	4b18      	ldr	r3, [pc, #96]	; (8000308 <MX_TIM2_Init+0x94>)
 80002a8:	2209      	movs	r2, #9
 80002aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ac:	4b16      	ldr	r3, [pc, #88]	; (8000308 <MX_TIM2_Init+0x94>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002b2:	4b15      	ldr	r3, [pc, #84]	; (8000308 <MX_TIM2_Init+0x94>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002b8:	4813      	ldr	r0, [pc, #76]	; (8000308 <MX_TIM2_Init+0x94>)
 80002ba:	f001 fa1f 	bl	80016fc <HAL_TIM_Base_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002c4:	f000 f8ec 	bl	80004a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002ce:	f107 0308 	add.w	r3, r7, #8
 80002d2:	4619      	mov	r1, r3
 80002d4:	480c      	ldr	r0, [pc, #48]	; (8000308 <MX_TIM2_Init+0x94>)
 80002d6:	f001 fb68 	bl	80019aa <HAL_TIM_ConfigClockSource>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002e0:	f000 f8de 	bl	80004a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002e4:	2300      	movs	r3, #0
 80002e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002e8:	2300      	movs	r3, #0
 80002ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002ec:	463b      	mov	r3, r7
 80002ee:	4619      	mov	r1, r3
 80002f0:	4805      	ldr	r0, [pc, #20]	; (8000308 <MX_TIM2_Init+0x94>)
 80002f2:	f001 fd43 	bl	8001d7c <HAL_TIMEx_MasterConfigSynchronization>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002fc:	f000 f8d0 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000300:	bf00      	nop
 8000302:	3718      	adds	r7, #24
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000028 	.word	0x20000028

0800030c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000310:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_USART2_UART_Init+0x4c>)
 8000312:	4a12      	ldr	r2, [pc, #72]	; (800035c <MX_USART2_UART_Init+0x50>)
 8000314:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000316:	4b10      	ldr	r3, [pc, #64]	; (8000358 <MX_USART2_UART_Init+0x4c>)
 8000318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800031c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_USART2_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_USART2_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <MX_USART2_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_USART2_UART_Init+0x4c>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <MX_USART2_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_USART2_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <MX_USART2_UART_Init+0x4c>)
 8000344:	f001 fd8a 	bl	8001e5c <HAL_UART_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800034e:	f000 f8a7 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000070 	.word	0x20000070
 800035c:	40004400 	.word	0x40004400

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000374:	4b45      	ldr	r3, [pc, #276]	; (800048c <MX_GPIO_Init+0x12c>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a44      	ldr	r2, [pc, #272]	; (800048c <MX_GPIO_Init+0x12c>)
 800037a:	f043 0310 	orr.w	r3, r3, #16
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b42      	ldr	r3, [pc, #264]	; (800048c <MX_GPIO_Init+0x12c>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0310 	and.w	r3, r3, #16
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038c:	4b3f      	ldr	r3, [pc, #252]	; (800048c <MX_GPIO_Init+0x12c>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a3e      	ldr	r2, [pc, #248]	; (800048c <MX_GPIO_Init+0x12c>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b3c      	ldr	r3, [pc, #240]	; (800048c <MX_GPIO_Init+0x12c>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0320 	and.w	r3, r3, #32
 80003a0:	60bb      	str	r3, [r7, #8]
 80003a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b39      	ldr	r3, [pc, #228]	; (800048c <MX_GPIO_Init+0x12c>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a38      	ldr	r2, [pc, #224]	; (800048c <MX_GPIO_Init+0x12c>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b36      	ldr	r3, [pc, #216]	; (800048c <MX_GPIO_Init+0x12c>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003bc:	4b33      	ldr	r3, [pc, #204]	; (800048c <MX_GPIO_Init+0x12c>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a32      	ldr	r2, [pc, #200]	; (800048c <MX_GPIO_Init+0x12c>)
 80003c2:	f043 0308 	orr.w	r3, r3, #8
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b30      	ldr	r3, [pc, #192]	; (800048c <MX_GPIO_Init+0x12c>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0308 	and.w	r3, r3, #8
 80003d0:	603b      	str	r3, [r7, #0]
 80003d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPEAKER_Pin|PEDESTRIAN_LED_1_Pin|LED_1_1_Pin, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 80003da:	482d      	ldr	r0, [pc, #180]	; (8000490 <MX_GPIO_Init+0x130>)
 80003dc:	f000 fd3a 	bl	8000e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDESTRIAN_LED_0_Pin|LED_1_0_Pin|LED_2_1_Pin|LED_2_0_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80003e6:	482b      	ldr	r0, [pc, #172]	; (8000494 <MX_GPIO_Init+0x134>)
 80003e8:	f000 fd34 	bl	8000e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003f2:	4b29      	ldr	r3, [pc, #164]	; (8000498 <MX_GPIO_Init+0x138>)
 80003f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f6:	2300      	movs	r3, #0
 80003f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	4619      	mov	r1, r3
 8000400:	4826      	ldr	r0, [pc, #152]	; (800049c <MX_GPIO_Init+0x13c>)
 8000402:	f000 fba3 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000406:	2313      	movs	r3, #19
 8000408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800040a:	2300      	movs	r3, #0
 800040c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	4619      	mov	r1, r3
 8000418:	481d      	ldr	r0, [pc, #116]	; (8000490 <MX_GPIO_Init+0x130>)
 800041a:	f000 fb97 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPEAKER_Pin PEDESTRIAN_LED_1_Pin LED_1_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPEAKER_Pin|PEDESTRIAN_LED_1_Pin|LED_1_1_Pin;
 800041e:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 8000422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000424:	2301      	movs	r3, #1
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042c:	2302      	movs	r3, #2
 800042e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	4619      	mov	r1, r3
 8000436:	4816      	ldr	r0, [pc, #88]	; (8000490 <MX_GPIO_Init+0x130>)
 8000438:	f000 fb88 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 800043c:	2301      	movs	r3, #1
 800043e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	4811      	ldr	r0, [pc, #68]	; (8000494 <MX_GPIO_Init+0x134>)
 8000450:	f000 fb7c 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDESTRIAN_LED_0_Pin LED_1_0_Pin LED_2_1_Pin LED_2_0_Pin */
  GPIO_InitStruct.Pin = PEDESTRIAN_LED_0_Pin|LED_1_0_Pin|LED_2_1_Pin|LED_2_0_Pin;
 8000454:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045a:	2301      	movs	r3, #1
 800045c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000462:	2302      	movs	r3, #2
 8000464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000466:	f107 0310 	add.w	r3, r7, #16
 800046a:	4619      	mov	r1, r3
 800046c:	4809      	ldr	r0, [pc, #36]	; (8000494 <MX_GPIO_Init+0x134>)
 800046e:	f000 fb6d 	bl	8000b4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000472:	2200      	movs	r2, #0
 8000474:	2100      	movs	r1, #0
 8000476:	2028      	movs	r0, #40	; 0x28
 8000478:	f000 fa81 	bl	800097e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800047c:	2028      	movs	r0, #40	; 0x28
 800047e:	f000 fa9a 	bl	80009b6 <HAL_NVIC_EnableIRQ>

}
 8000482:	bf00      	nop
 8000484:	3720      	adds	r7, #32
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000
 8000490:	40010800 	.word	0x40010800
 8000494:	40010c00 	.word	0x40010c00
 8000498:	10110000 	.word	0x10110000
 800049c:	40011000 	.word	0x40011000

080004a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a4:	b672      	cpsid	i
}
 80004a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <Error_Handler+0x8>
	...

080004ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b2:	4b15      	ldr	r3, [pc, #84]	; (8000508 <HAL_MspInit+0x5c>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4a14      	ldr	r2, [pc, #80]	; (8000508 <HAL_MspInit+0x5c>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6193      	str	r3, [r2, #24]
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <HAL_MspInit+0x5c>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <HAL_MspInit+0x5c>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <HAL_MspInit+0x5c>)
 80004d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <HAL_MspInit+0x5c>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <HAL_MspInit+0x60>)
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <HAL_MspInit+0x60>)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	40021000 	.word	0x40021000
 800050c:	40010000 	.word	0x40010000

08000510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000520:	d113      	bne.n	800054a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_TIM_Base_MspInit+0x44>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_TIM_Base_MspInit+0x44>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	61d3      	str	r3, [r2, #28]
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <HAL_TIM_Base_MspInit+0x44>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	201c      	movs	r0, #28
 8000540:	f000 fa1d 	bl	800097e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000544:	201c      	movs	r0, #28
 8000546:	f000 fa36 	bl	80009b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800054a:	bf00      	nop
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <HAL_UART_MspInit+0x80>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d12b      	bne.n	80005d0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000578:	4b18      	ldr	r3, [pc, #96]	; (80005dc <HAL_UART_MspInit+0x84>)
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	4a17      	ldr	r2, [pc, #92]	; (80005dc <HAL_UART_MspInit+0x84>)
 800057e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000582:	61d3      	str	r3, [r2, #28]
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <HAL_UART_MspInit+0x84>)
 8000586:	69db      	ldr	r3, [r3, #28]
 8000588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <HAL_UART_MspInit+0x84>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a11      	ldr	r2, [pc, #68]	; (80005dc <HAL_UART_MspInit+0x84>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <HAL_UART_MspInit+0x84>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005a8:	230c      	movs	r3, #12
 80005aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ac:	2302      	movs	r3, #2
 80005ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	4619      	mov	r1, r3
 80005ba:	4809      	ldr	r0, [pc, #36]	; (80005e0 <HAL_UART_MspInit+0x88>)
 80005bc:	f000 fac6 	bl	8000b4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2100      	movs	r1, #0
 80005c4:	2026      	movs	r0, #38	; 0x26
 80005c6:	f000 f9da 	bl	800097e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005ca:	2026      	movs	r0, #38	; 0x26
 80005cc:	f000 f9f3 	bl	80009b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005d0:	bf00      	nop
 80005d2:	3720      	adds	r7, #32
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40004400 	.word	0x40004400
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010800 	.word	0x40010800

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <NMI_Handler+0x4>

080005ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <HardFault_Handler+0x4>

080005f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <MemManage_Handler+0x4>

080005f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <BusFault_Handler+0x4>

080005fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <UsageFault_Handler+0x4>

08000602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr

0800061a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062a:	f000 f891 	bl	8000750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000638:	4802      	ldr	r0, [pc, #8]	; (8000644 <TIM2_IRQHandler+0x10>)
 800063a:	f001 f8ae 	bl	800179a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000028 	.word	0x20000028

08000648 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800064c:	4802      	ldr	r0, [pc, #8]	; (8000658 <USART2_IRQHandler+0x10>)
 800064e:	f001 fc53 	bl	8001ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000070 	.word	0x20000070

0800065c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000660:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000664:	f000 fc0e 	bl	8000e84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800067a:	490d      	ldr	r1, [pc, #52]	; (80006b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000680:	e002      	b.n	8000688 <LoopCopyDataInit>

08000682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000686:	3304      	adds	r3, #4

08000688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800068c:	d3f9      	bcc.n	8000682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000690:	4c0a      	ldr	r4, [pc, #40]	; (80006bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000694:	e001      	b.n	800069a <LoopFillZerobss>

08000696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000698:	3204      	adds	r2, #4

0800069a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800069c:	d3fb      	bcc.n	8000696 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800069e:	f7ff ffe5 	bl	800066c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006a2:	f001 ffd7 	bl	8002654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a6:	f7ff fd51 	bl	800014c <main>
  bx lr
 80006aa:	4770      	bx	lr
  ldr r0, =_sdata
 80006ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b4:	080026f4 	.word	0x080026f4
  ldr r2, =_sbss
 80006b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006bc:	200000b8 	.word	0x200000b8

080006c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c0:	e7fe      	b.n	80006c0 <ADC1_2_IRQHandler>
	...

080006c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <HAL_Init+0x28>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a07      	ldr	r2, [pc, #28]	; (80006ec <HAL_Init+0x28>)
 80006ce:	f043 0310 	orr.w	r3, r3, #16
 80006d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d4:	2003      	movs	r0, #3
 80006d6:	f000 f947 	bl	8000968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 f808 	bl	80006f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e0:	f7ff fee4 	bl	80004ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40022000 	.word	0x40022000

080006f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_InitTick+0x54>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_InitTick+0x58>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	fbb3 f3f1 	udiv	r3, r3, r1
 800070a:	fbb2 f3f3 	udiv	r3, r2, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f95f 	bl	80009d2 <HAL_SYSTICK_Config>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	e00e      	b.n	800073c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	d80a      	bhi.n	800073a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000724:	2200      	movs	r2, #0
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f000 f927 	bl	800097e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000730:	4a06      	ldr	r2, [pc, #24]	; (800074c <HAL_InitTick+0x5c>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000736:	2300      	movs	r3, #0
 8000738:	e000      	b.n	800073c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
}
 800073c:	4618      	mov	r0, r3
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000000 	.word	0x20000000
 8000748:	20000008 	.word	0x20000008
 800074c:	20000004 	.word	0x20000004

08000750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_IncTick+0x1c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_IncTick+0x20>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4413      	add	r3, r2
 8000760:	4a03      	ldr	r2, [pc, #12]	; (8000770 <HAL_IncTick+0x20>)
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	20000008 	.word	0x20000008
 8000770:	200000b4 	.word	0x200000b4

08000774 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <HAL_GetTick+0x10>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	200000b4 	.word	0x200000b4

08000788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000790:	f7ff fff0 	bl	8000774 <HAL_GetTick>
 8000794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a0:	d005      	beq.n	80007ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <HAL_Delay+0x44>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	461a      	mov	r2, r3
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	4413      	add	r3, r2
 80007ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ae:	bf00      	nop
 80007b0:	f7ff ffe0 	bl	8000774 <HAL_GetTick>
 80007b4:	4602      	mov	r2, r0
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d8f7      	bhi.n	80007b0 <HAL_Delay+0x28>
  {
  }
}
 80007c0:	bf00      	nop
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000008 	.word	0x20000008

080007d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000802:	4a04      	ldr	r2, [pc, #16]	; (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	60d3      	str	r3, [r2, #12]
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <__NVIC_GetPriorityGrouping+0x18>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	f003 0307 	and.w	r3, r3, #7
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	2b00      	cmp	r3, #0
 8000844:	db0b      	blt.n	800085e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	f003 021f 	and.w	r2, r3, #31
 800084c:	4906      	ldr	r1, [pc, #24]	; (8000868 <__NVIC_EnableIRQ+0x34>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	095b      	lsrs	r3, r3, #5
 8000854:	2001      	movs	r0, #1
 8000856:	fa00 f202 	lsl.w	r2, r0, r2
 800085a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	e000e100 	.word	0xe000e100

0800086c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	2b00      	cmp	r3, #0
 800087e:	db0a      	blt.n	8000896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	b2da      	uxtb	r2, r3
 8000884:	490c      	ldr	r1, [pc, #48]	; (80008b8 <__NVIC_SetPriority+0x4c>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	0112      	lsls	r2, r2, #4
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	440b      	add	r3, r1
 8000890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000894:	e00a      	b.n	80008ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4908      	ldr	r1, [pc, #32]	; (80008bc <__NVIC_SetPriority+0x50>)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	f003 030f 	and.w	r3, r3, #15
 80008a2:	3b04      	subs	r3, #4
 80008a4:	0112      	lsls	r2, r2, #4
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	440b      	add	r3, r1
 80008aa:	761a      	strb	r2, [r3, #24]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000e100 	.word	0xe000e100
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	f1c3 0307 	rsb	r3, r3, #7
 80008da:	2b04      	cmp	r3, #4
 80008dc:	bf28      	it	cs
 80008de:	2304      	movcs	r3, #4
 80008e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3304      	adds	r3, #4
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d902      	bls.n	80008f0 <NVIC_EncodePriority+0x30>
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3b03      	subs	r3, #3
 80008ee:	e000      	b.n	80008f2 <NVIC_EncodePriority+0x32>
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	f04f 32ff 	mov.w	r2, #4294967295
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43da      	mvns	r2, r3
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	401a      	ands	r2, r3
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000908:	f04f 31ff 	mov.w	r1, #4294967295
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa01 f303 	lsl.w	r3, r1, r3
 8000912:	43d9      	mvns	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	4313      	orrs	r3, r2
         );
}
 800091a:	4618      	mov	r0, r3
 800091c:	3724      	adds	r7, #36	; 0x24
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000934:	d301      	bcc.n	800093a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000936:	2301      	movs	r3, #1
 8000938:	e00f      	b.n	800095a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <SysTick_Config+0x40>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000942:	210f      	movs	r1, #15
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f7ff ff90 	bl	800086c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <SysTick_Config+0x40>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000952:	4b04      	ldr	r3, [pc, #16]	; (8000964 <SysTick_Config+0x40>)
 8000954:	2207      	movs	r2, #7
 8000956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	e000e010 	.word	0xe000e010

08000968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ff2d 	bl	80007d0 <__NVIC_SetPriorityGrouping>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800097e:	b580      	push	{r7, lr}
 8000980:	b086      	sub	sp, #24
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000990:	f7ff ff42 	bl	8000818 <__NVIC_GetPriorityGrouping>
 8000994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	68b9      	ldr	r1, [r7, #8]
 800099a:	6978      	ldr	r0, [r7, #20]
 800099c:	f7ff ff90 	bl	80008c0 <NVIC_EncodePriority>
 80009a0:	4602      	mov	r2, r0
 80009a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff5f 	bl	800086c <__NVIC_SetPriority>
}
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff35 	bl	8000834 <__NVIC_EnableIRQ>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff ffa2 	bl	8000924 <SysTick_Config>
 80009e0:	4603      	mov	r3, r0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b085      	sub	sp, #20
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d008      	beq.n	8000a12 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2204      	movs	r2, #4
 8000a04:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e020      	b.n	8000a54 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f022 020e 	bic.w	r2, r2, #14
 8000a20:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f022 0201 	bic.w	r2, r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a40:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2201      	movs	r2, #1
 8000a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
	...

08000a60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d005      	beq.n	8000a82 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2204      	movs	r2, #4
 8000a7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	e051      	b.n	8000b26 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f022 020e 	bic.w	r2, r2, #14
 8000a90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f022 0201 	bic.w	r2, r2, #1
 8000aa0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <HAL_DMA_Abort_IT+0xd0>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d029      	beq.n	8000b00 <HAL_DMA_Abort_IT+0xa0>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a20      	ldr	r2, [pc, #128]	; (8000b34 <HAL_DMA_Abort_IT+0xd4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d022      	beq.n	8000afc <HAL_DMA_Abort_IT+0x9c>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a1f      	ldr	r2, [pc, #124]	; (8000b38 <HAL_DMA_Abort_IT+0xd8>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d01a      	beq.n	8000af6 <HAL_DMA_Abort_IT+0x96>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <HAL_DMA_Abort_IT+0xdc>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d012      	beq.n	8000af0 <HAL_DMA_Abort_IT+0x90>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <HAL_DMA_Abort_IT+0xe0>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d00a      	beq.n	8000aea <HAL_DMA_Abort_IT+0x8a>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a1a      	ldr	r2, [pc, #104]	; (8000b44 <HAL_DMA_Abort_IT+0xe4>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d102      	bne.n	8000ae4 <HAL_DMA_Abort_IT+0x84>
 8000ade:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ae2:	e00e      	b.n	8000b02 <HAL_DMA_Abort_IT+0xa2>
 8000ae4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ae8:	e00b      	b.n	8000b02 <HAL_DMA_Abort_IT+0xa2>
 8000aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aee:	e008      	b.n	8000b02 <HAL_DMA_Abort_IT+0xa2>
 8000af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af4:	e005      	b.n	8000b02 <HAL_DMA_Abort_IT+0xa2>
 8000af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afa:	e002      	b.n	8000b02 <HAL_DMA_Abort_IT+0xa2>
 8000afc:	2310      	movs	r3, #16
 8000afe:	e000      	b.n	8000b02 <HAL_DMA_Abort_IT+0xa2>
 8000b00:	2301      	movs	r3, #1
 8000b02:	4a11      	ldr	r2, [pc, #68]	; (8000b48 <HAL_DMA_Abort_IT+0xe8>)
 8000b04:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	4798      	blx	r3
    } 
  }
  return status;
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40020008 	.word	0x40020008
 8000b34:	4002001c 	.word	0x4002001c
 8000b38:	40020030 	.word	0x40020030
 8000b3c:	40020044 	.word	0x40020044
 8000b40:	40020058 	.word	0x40020058
 8000b44:	4002006c 	.word	0x4002006c
 8000b48:	40020000 	.word	0x40020000

08000b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b08b      	sub	sp, #44	; 0x2c
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5e:	e169      	b.n	8000e34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b60:	2201      	movs	r2, #1
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	69fa      	ldr	r2, [r7, #28]
 8000b70:	4013      	ands	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	f040 8158 	bne.w	8000e2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	4a9a      	ldr	r2, [pc, #616]	; (8000dec <HAL_GPIO_Init+0x2a0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d05e      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
 8000b88:	4a98      	ldr	r2, [pc, #608]	; (8000dec <HAL_GPIO_Init+0x2a0>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d875      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000b8e:	4a98      	ldr	r2, [pc, #608]	; (8000df0 <HAL_GPIO_Init+0x2a4>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d058      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
 8000b94:	4a96      	ldr	r2, [pc, #600]	; (8000df0 <HAL_GPIO_Init+0x2a4>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d86f      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000b9a:	4a96      	ldr	r2, [pc, #600]	; (8000df4 <HAL_GPIO_Init+0x2a8>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d052      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
 8000ba0:	4a94      	ldr	r2, [pc, #592]	; (8000df4 <HAL_GPIO_Init+0x2a8>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d869      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000ba6:	4a94      	ldr	r2, [pc, #592]	; (8000df8 <HAL_GPIO_Init+0x2ac>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d04c      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
 8000bac:	4a92      	ldr	r2, [pc, #584]	; (8000df8 <HAL_GPIO_Init+0x2ac>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d863      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000bb2:	4a92      	ldr	r2, [pc, #584]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d046      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
 8000bb8:	4a90      	ldr	r2, [pc, #576]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d85d      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000bbe:	2b12      	cmp	r3, #18
 8000bc0:	d82a      	bhi.n	8000c18 <HAL_GPIO_Init+0xcc>
 8000bc2:	2b12      	cmp	r3, #18
 8000bc4:	d859      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000bc6:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <HAL_GPIO_Init+0x80>)
 8000bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bcc:	08000c47 	.word	0x08000c47
 8000bd0:	08000c21 	.word	0x08000c21
 8000bd4:	08000c33 	.word	0x08000c33
 8000bd8:	08000c75 	.word	0x08000c75
 8000bdc:	08000c7b 	.word	0x08000c7b
 8000be0:	08000c7b 	.word	0x08000c7b
 8000be4:	08000c7b 	.word	0x08000c7b
 8000be8:	08000c7b 	.word	0x08000c7b
 8000bec:	08000c7b 	.word	0x08000c7b
 8000bf0:	08000c7b 	.word	0x08000c7b
 8000bf4:	08000c7b 	.word	0x08000c7b
 8000bf8:	08000c7b 	.word	0x08000c7b
 8000bfc:	08000c7b 	.word	0x08000c7b
 8000c00:	08000c7b 	.word	0x08000c7b
 8000c04:	08000c7b 	.word	0x08000c7b
 8000c08:	08000c7b 	.word	0x08000c7b
 8000c0c:	08000c7b 	.word	0x08000c7b
 8000c10:	08000c29 	.word	0x08000c29
 8000c14:	08000c3d 	.word	0x08000c3d
 8000c18:	4a79      	ldr	r2, [pc, #484]	; (8000e00 <HAL_GPIO_Init+0x2b4>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d013      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c1e:	e02c      	b.n	8000c7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	623b      	str	r3, [r7, #32]
          break;
 8000c26:	e029      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	623b      	str	r3, [r7, #32]
          break;
 8000c30:	e024      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	3308      	adds	r3, #8
 8000c38:	623b      	str	r3, [r7, #32]
          break;
 8000c3a:	e01f      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	330c      	adds	r3, #12
 8000c42:	623b      	str	r3, [r7, #32]
          break;
 8000c44:	e01a      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d102      	bne.n	8000c54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c4e:	2304      	movs	r3, #4
 8000c50:	623b      	str	r3, [r7, #32]
          break;
 8000c52:	e013      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d105      	bne.n	8000c68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	611a      	str	r2, [r3, #16]
          break;
 8000c66:	e009      	b.n	8000c7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c68:	2308      	movs	r3, #8
 8000c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	615a      	str	r2, [r3, #20]
          break;
 8000c72:	e003      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
          break;
 8000c78:	e000      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          break;
 8000c7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	2bff      	cmp	r3, #255	; 0xff
 8000c80:	d801      	bhi.n	8000c86 <HAL_GPIO_Init+0x13a>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	e001      	b.n	8000c8a <HAL_GPIO_Init+0x13e>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	2bff      	cmp	r3, #255	; 0xff
 8000c90:	d802      	bhi.n	8000c98 <HAL_GPIO_Init+0x14c>
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	e002      	b.n	8000c9e <HAL_GPIO_Init+0x152>
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	3b08      	subs	r3, #8
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	210f      	movs	r1, #15
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	401a      	ands	r2, r3
 8000cb0:	6a39      	ldr	r1, [r7, #32]
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 80b1 	beq.w	8000e2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ccc:	4b4d      	ldr	r3, [pc, #308]	; (8000e04 <HAL_GPIO_Init+0x2b8>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a4c      	ldr	r2, [pc, #304]	; (8000e04 <HAL_GPIO_Init+0x2b8>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b4a      	ldr	r3, [pc, #296]	; (8000e04 <HAL_GPIO_Init+0x2b8>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ce4:	4a48      	ldr	r2, [pc, #288]	; (8000e08 <HAL_GPIO_Init+0x2bc>)
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	089b      	lsrs	r3, r3, #2
 8000cea:	3302      	adds	r3, #2
 8000cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	4013      	ands	r3, r2
 8000d06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a40      	ldr	r2, [pc, #256]	; (8000e0c <HAL_GPIO_Init+0x2c0>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d013      	beq.n	8000d38 <HAL_GPIO_Init+0x1ec>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a3f      	ldr	r2, [pc, #252]	; (8000e10 <HAL_GPIO_Init+0x2c4>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d00d      	beq.n	8000d34 <HAL_GPIO_Init+0x1e8>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a3e      	ldr	r2, [pc, #248]	; (8000e14 <HAL_GPIO_Init+0x2c8>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d007      	beq.n	8000d30 <HAL_GPIO_Init+0x1e4>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a3d      	ldr	r2, [pc, #244]	; (8000e18 <HAL_GPIO_Init+0x2cc>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d101      	bne.n	8000d2c <HAL_GPIO_Init+0x1e0>
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e006      	b.n	8000d3a <HAL_GPIO_Init+0x1ee>
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	e004      	b.n	8000d3a <HAL_GPIO_Init+0x1ee>
 8000d30:	2302      	movs	r3, #2
 8000d32:	e002      	b.n	8000d3a <HAL_GPIO_Init+0x1ee>
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <HAL_GPIO_Init+0x1ee>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d3c:	f002 0203 	and.w	r2, r2, #3
 8000d40:	0092      	lsls	r2, r2, #2
 8000d42:	4093      	lsls	r3, r2
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d4a:	492f      	ldr	r1, [pc, #188]	; (8000e08 <HAL_GPIO_Init+0x2bc>)
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3302      	adds	r3, #2
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d006      	beq.n	8000d72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d64:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	492c      	ldr	r1, [pc, #176]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	600b      	str	r3, [r1, #0]
 8000d70:	e006      	b.n	8000d80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d72:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	4928      	ldr	r1, [pc, #160]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d006      	beq.n	8000d9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	4922      	ldr	r1, [pc, #136]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	604b      	str	r3, [r1, #4]
 8000d98:	e006      	b.n	8000da8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	491e      	ldr	r1, [pc, #120]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000da4:	4013      	ands	r3, r2
 8000da6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d006      	beq.n	8000dc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	4918      	ldr	r1, [pc, #96]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	608b      	str	r3, [r1, #8]
 8000dc0:	e006      	b.n	8000dd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	4914      	ldr	r1, [pc, #80]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d021      	beq.n	8000e20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	490e      	ldr	r1, [pc, #56]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	60cb      	str	r3, [r1, #12]
 8000de8:	e021      	b.n	8000e2e <HAL_GPIO_Init+0x2e2>
 8000dea:	bf00      	nop
 8000dec:	10320000 	.word	0x10320000
 8000df0:	10310000 	.word	0x10310000
 8000df4:	10220000 	.word	0x10220000
 8000df8:	10210000 	.word	0x10210000
 8000dfc:	10120000 	.word	0x10120000
 8000e00:	10110000 	.word	0x10110000
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010000 	.word	0x40010000
 8000e0c:	40010800 	.word	0x40010800
 8000e10:	40010c00 	.word	0x40010c00
 8000e14:	40011000 	.word	0x40011000
 8000e18:	40011400 	.word	0x40011400
 8000e1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_GPIO_Init+0x304>)
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	4909      	ldr	r1, [pc, #36]	; (8000e50 <HAL_GPIO_Init+0x304>)
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	3301      	adds	r3, #1
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f47f ae8e 	bne.w	8000b60 <HAL_GPIO_Init+0x14>
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	372c      	adds	r7, #44	; 0x2c
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	40010400 	.word	0x40010400

08000e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
 8000e60:	4613      	mov	r3, r2
 8000e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e64:	787b      	ldrb	r3, [r7, #1]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e70:	e003      	b.n	8000e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	041a      	lsls	r2, r3, #16
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	611a      	str	r2, [r3, #16]
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e90:	695a      	ldr	r2, [r3, #20]
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d006      	beq.n	8000ea8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e9c:	88fb      	ldrh	r3, [r7, #6]
 8000e9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f806 	bl	8000eb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40010400 	.word	0x40010400

08000eb4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e272      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 8087 	beq.w	8000ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ee8:	4b92      	ldr	r3, [pc, #584]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d00c      	beq.n	8000f0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef4:	4b8f      	ldr	r3, [pc, #572]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 030c 	and.w	r3, r3, #12
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d112      	bne.n	8000f26 <HAL_RCC_OscConfig+0x5e>
 8000f00:	4b8c      	ldr	r3, [pc, #560]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0c:	d10b      	bne.n	8000f26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0e:	4b89      	ldr	r3, [pc, #548]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d06c      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x12c>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d168      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e24c      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2e:	d106      	bne.n	8000f3e <HAL_RCC_OscConfig+0x76>
 8000f30:	4b80      	ldr	r3, [pc, #512]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a7f      	ldr	r2, [pc, #508]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	e02e      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x98>
 8000f46:	4b7b      	ldr	r3, [pc, #492]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a7a      	ldr	r2, [pc, #488]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4b78      	ldr	r3, [pc, #480]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a77      	ldr	r2, [pc, #476]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e01d      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0xbc>
 8000f6a:	4b72      	ldr	r3, [pc, #456]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a71      	ldr	r2, [pc, #452]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b6f      	ldr	r3, [pc, #444]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a6e      	ldr	r2, [pc, #440]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e00b      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f84:	4b6b      	ldr	r3, [pc, #428]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a6a      	ldr	r2, [pc, #424]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b68      	ldr	r3, [pc, #416]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a67      	ldr	r2, [pc, #412]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d013      	beq.n	8000fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fbe6 	bl	8000774 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fbe2 	bl	8000774 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b64      	cmp	r3, #100	; 0x64
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e200      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbe:	4b5d      	ldr	r3, [pc, #372]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0f0      	beq.n	8000fac <HAL_RCC_OscConfig+0xe4>
 8000fca:	e014      	b.n	8000ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fbd2 	bl	8000774 <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd4:	f7ff fbce 	bl	8000774 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b64      	cmp	r3, #100	; 0x64
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e1ec      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe6:	4b53      	ldr	r3, [pc, #332]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f0      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x10c>
 8000ff2:	e000      	b.n	8000ff6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d063      	beq.n	80010ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001002:	4b4c      	ldr	r3, [pc, #304]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800100e:	4b49      	ldr	r3, [pc, #292]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b08      	cmp	r3, #8
 8001018:	d11c      	bne.n	8001054 <HAL_RCC_OscConfig+0x18c>
 800101a:	4b46      	ldr	r3, [pc, #280]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d116      	bne.n	8001054 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001026:	4b43      	ldr	r3, [pc, #268]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <HAL_RCC_OscConfig+0x176>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d001      	beq.n	800103e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e1c0      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103e:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4939      	ldr	r1, [pc, #228]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 800104e:	4313      	orrs	r3, r2
 8001050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001052:	e03a      	b.n	80010ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d020      	beq.n	800109e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800105c:	4b36      	ldr	r3, [pc, #216]	; (8001138 <HAL_RCC_OscConfig+0x270>)
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001062:	f7ff fb87 	bl	8000774 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106a:	f7ff fb83 	bl	8000774 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e1a1      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0f0      	beq.n	800106a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001088:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4927      	ldr	r1, [pc, #156]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001098:	4313      	orrs	r3, r2
 800109a:	600b      	str	r3, [r1, #0]
 800109c:	e015      	b.n	80010ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <HAL_RCC_OscConfig+0x270>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fb66 	bl	8000774 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ac:	f7ff fb62 	bl	8000774 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e180      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d03a      	beq.n	800114c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d019      	beq.n	8001112 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_RCC_OscConfig+0x274>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e4:	f7ff fb46 	bl	8000774 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ec:	f7ff fb42 	bl	8000774 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e160      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f0      	beq.n	80010ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800110a:	2001      	movs	r0, #1
 800110c:	f000 fad8 	bl	80016c0 <RCC_Delay>
 8001110:	e01c      	b.n	800114c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_RCC_OscConfig+0x274>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001118:	f7ff fb2c 	bl	8000774 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800111e:	e00f      	b.n	8001140 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001120:	f7ff fb28 	bl	8000774 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d908      	bls.n	8001140 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e146      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	42420000 	.word	0x42420000
 800113c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001140:	4b92      	ldr	r3, [pc, #584]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1e9      	bne.n	8001120 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80a6 	beq.w	80012a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115e:	4b8b      	ldr	r3, [pc, #556]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10d      	bne.n	8001186 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b88      	ldr	r3, [pc, #544]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a87      	ldr	r2, [pc, #540]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b85      	ldr	r3, [pc, #532]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001182:	2301      	movs	r3, #1
 8001184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001186:	4b82      	ldr	r3, [pc, #520]	; (8001390 <HAL_RCC_OscConfig+0x4c8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118e:	2b00      	cmp	r3, #0
 8001190:	d118      	bne.n	80011c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001192:	4b7f      	ldr	r3, [pc, #508]	; (8001390 <HAL_RCC_OscConfig+0x4c8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a7e      	ldr	r2, [pc, #504]	; (8001390 <HAL_RCC_OscConfig+0x4c8>)
 8001198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800119e:	f7ff fae9 	bl	8000774 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011a6:	f7ff fae5 	bl	8000774 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b64      	cmp	r3, #100	; 0x64
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e103      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b8:	4b75      	ldr	r3, [pc, #468]	; (8001390 <HAL_RCC_OscConfig+0x4c8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d106      	bne.n	80011da <HAL_RCC_OscConfig+0x312>
 80011cc:	4b6f      	ldr	r3, [pc, #444]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	4a6e      	ldr	r2, [pc, #440]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6213      	str	r3, [r2, #32]
 80011d8:	e02d      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x334>
 80011e2:	4b6a      	ldr	r3, [pc, #424]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a69      	ldr	r2, [pc, #420]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	6213      	str	r3, [r2, #32]
 80011ee:	4b67      	ldr	r3, [pc, #412]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a66      	ldr	r2, [pc, #408]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	f023 0304 	bic.w	r3, r3, #4
 80011f8:	6213      	str	r3, [r2, #32]
 80011fa:	e01c      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b05      	cmp	r3, #5
 8001202:	d10c      	bne.n	800121e <HAL_RCC_OscConfig+0x356>
 8001204:	4b61      	ldr	r3, [pc, #388]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	4a60      	ldr	r2, [pc, #384]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6213      	str	r3, [r2, #32]
 8001210:	4b5e      	ldr	r3, [pc, #376]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	4a5d      	ldr	r2, [pc, #372]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6213      	str	r3, [r2, #32]
 800121c:	e00b      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 800121e:	4b5b      	ldr	r3, [pc, #364]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	4a5a      	ldr	r2, [pc, #360]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001224:	f023 0301 	bic.w	r3, r3, #1
 8001228:	6213      	str	r3, [r2, #32]
 800122a:	4b58      	ldr	r3, [pc, #352]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4a57      	ldr	r2, [pc, #348]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001230:	f023 0304 	bic.w	r3, r3, #4
 8001234:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d015      	beq.n	800126a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123e:	f7ff fa99 	bl	8000774 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001244:	e00a      	b.n	800125c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001246:	f7ff fa95 	bl	8000774 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f241 3288 	movw	r2, #5000	; 0x1388
 8001254:	4293      	cmp	r3, r2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e0b1      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800125c:	4b4b      	ldr	r3, [pc, #300]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0ee      	beq.n	8001246 <HAL_RCC_OscConfig+0x37e>
 8001268:	e014      	b.n	8001294 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff fa83 	bl	8000774 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f7ff fa7f 	bl	8000774 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001280:	4293      	cmp	r3, r2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e09b      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001288:	4b40      	ldr	r3, [pc, #256]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1ee      	bne.n	8001272 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d105      	bne.n	80012a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800129a:	4b3c      	ldr	r3, [pc, #240]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a3b      	ldr	r2, [pc, #236]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8087 	beq.w	80013be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d061      	beq.n	8001380 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d146      	bne.n	8001352 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c4:	4b33      	ldr	r3, [pc, #204]	; (8001394 <HAL_RCC_OscConfig+0x4cc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ca:	f7ff fa53 	bl	8000774 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d2:	f7ff fa4f 	bl	8000774 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e06d      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e4:	4b29      	ldr	r3, [pc, #164]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f0      	bne.n	80012d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f8:	d108      	bne.n	800130c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012fa:	4b24      	ldr	r3, [pc, #144]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	4921      	ldr	r1, [pc, #132]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a19      	ldr	r1, [r3, #32]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	430b      	orrs	r3, r1
 800131e:	491b      	ldr	r1, [pc, #108]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <HAL_RCC_OscConfig+0x4cc>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fa23 	bl	8000774 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001332:	f7ff fa1f 	bl	8000774 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e03d      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x46a>
 8001350:	e035      	b.n	80013be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_RCC_OscConfig+0x4cc>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fa0c 	bl	8000774 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff fa08 	bl	8000774 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e026      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x498>
 800137e:	e01e      	b.n	80013be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d107      	bne.n	8001398 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e019      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
 800138c:	40021000 	.word	0x40021000
 8001390:	40007000 	.word	0x40007000
 8001394:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d001      	beq.n	80013be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021000 	.word	0x40021000

080013cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0d0      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013e0:	4b6a      	ldr	r3, [pc, #424]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d910      	bls.n	8001410 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ee:	4b67      	ldr	r3, [pc, #412]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 0207 	bic.w	r2, r3, #7
 80013f6:	4965      	ldr	r1, [pc, #404]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b63      	ldr	r3, [pc, #396]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0b8      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001428:	4b59      	ldr	r3, [pc, #356]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4a58      	ldr	r2, [pc, #352]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001432:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001440:	4b53      	ldr	r3, [pc, #332]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4a52      	ldr	r2, [pc, #328]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800144a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800144c:	4b50      	ldr	r3, [pc, #320]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	494d      	ldr	r1, [pc, #308]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	4313      	orrs	r3, r2
 800145c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d040      	beq.n	80014ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b47      	ldr	r3, [pc, #284]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d115      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e07f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d107      	bne.n	800149a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148a:	4b41      	ldr	r3, [pc, #260]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d109      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e073      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149a:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e06b      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014aa:	4b39      	ldr	r3, [pc, #228]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f023 0203 	bic.w	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4936      	ldr	r1, [pc, #216]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014bc:	f7ff f95a 	bl	8000774 <HAL_GetTick>
 80014c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c2:	e00a      	b.n	80014da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c4:	f7ff f956 	bl	8000774 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e053      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 020c 	and.w	r2, r3, #12
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d1eb      	bne.n	80014c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014ec:	4b27      	ldr	r3, [pc, #156]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d210      	bcs.n	800151c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 0207 	bic.w	r2, r3, #7
 8001502:	4922      	ldr	r1, [pc, #136]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e032      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4916      	ldr	r1, [pc, #88]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001536:	4313      	orrs	r3, r2
 8001538:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	490e      	ldr	r1, [pc, #56]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	4313      	orrs	r3, r2
 8001558:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800155a:	f000 f821 	bl	80015a0 <HAL_RCC_GetSysClockFreq>
 800155e:	4602      	mov	r2, r0
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	490a      	ldr	r1, [pc, #40]	; (8001594 <HAL_RCC_ClockConfig+0x1c8>)
 800156c:	5ccb      	ldrb	r3, [r1, r3]
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a09      	ldr	r2, [pc, #36]	; (8001598 <HAL_RCC_ClockConfig+0x1cc>)
 8001574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_RCC_ClockConfig+0x1d0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f8b8 	bl	80006f0 <HAL_InitTick>

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40022000 	.word	0x40022000
 8001590:	40021000 	.word	0x40021000
 8001594:	080026d4 	.word	0x080026d4
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004

080015a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a0:	b490      	push	{r4, r7}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015a6:	4b29      	ldr	r3, [pc, #164]	; (800164c <HAL_RCC_GetSysClockFreq+0xac>)
 80015a8:	1d3c      	adds	r4, r7, #4
 80015aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015b0:	f240 2301 	movw	r3, #513	; 0x201
 80015b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d002      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x40>
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d003      	beq.n	80015e6 <HAL_RCC_GetSysClockFreq+0x46>
 80015de:	e02b      	b.n	8001638 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015e0:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015e2:	623b      	str	r3, [r7, #32]
      break;
 80015e4:	e02b      	b.n	800163e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	0c9b      	lsrs	r3, r3, #18
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	3328      	adds	r3, #40	; 0x28
 80015f0:	443b      	add	r3, r7
 80015f2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015f6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d012      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	0c5b      	lsrs	r3, r3, #17
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	3328      	adds	r3, #40	; 0x28
 800160e:	443b      	add	r3, r7
 8001610:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001614:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <HAL_RCC_GetSysClockFreq+0xb4>)
 800161a:	fb03 f202 	mul.w	r2, r3, r2
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	fbb2 f3f3 	udiv	r3, r2, r3
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
 8001626:	e004      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <HAL_RCC_GetSysClockFreq+0xb8>)
 800162c:	fb02 f303 	mul.w	r3, r2, r3
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	623b      	str	r3, [r7, #32]
      break;
 8001636:	e002      	b.n	800163e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_RCC_GetSysClockFreq+0xb4>)
 800163a:	623b      	str	r3, [r7, #32]
      break;
 800163c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800163e:	6a3b      	ldr	r3, [r7, #32]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bc90      	pop	{r4, r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	080026c4 	.word	0x080026c4
 8001650:	40021000 	.word	0x40021000
 8001654:	007a1200 	.word	0x007a1200
 8001658:	003d0900 	.word	0x003d0900

0800165c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001660:	4b02      	ldr	r3, [pc, #8]	; (800166c <HAL_RCC_GetHCLKFreq+0x10>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	20000000 	.word	0x20000000

08001670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001674:	f7ff fff2 	bl	800165c <HAL_RCC_GetHCLKFreq>
 8001678:	4602      	mov	r2, r0
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	4903      	ldr	r1, [pc, #12]	; (8001694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001686:	5ccb      	ldrb	r3, [r1, r3]
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800168c:	4618      	mov	r0, r3
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40021000 	.word	0x40021000
 8001694:	080026e4 	.word	0x080026e4

08001698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800169c:	f7ff ffde 	bl	800165c <HAL_RCC_GetHCLKFreq>
 80016a0:	4602      	mov	r2, r0
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	0adb      	lsrs	r3, r3, #11
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	4903      	ldr	r1, [pc, #12]	; (80016bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80016ae:	5ccb      	ldrb	r3, [r1, r3]
 80016b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40021000 	.word	0x40021000
 80016bc:	080026e4 	.word	0x080026e4

080016c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <RCC_Delay+0x34>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <RCC_Delay+0x38>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	0a5b      	lsrs	r3, r3, #9
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016dc:	bf00      	nop
  }
  while (Delay --);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1e5a      	subs	r2, r3, #1
 80016e2:	60fa      	str	r2, [r7, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f9      	bne.n	80016dc <RCC_Delay+0x1c>
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	20000000 	.word	0x20000000
 80016f8:	10624dd3 	.word	0x10624dd3

080016fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e041      	b.n	8001792 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d106      	bne.n	8001728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7fe fef4 	bl	8000510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2202      	movs	r2, #2
 800172c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3304      	adds	r3, #4
 8001738:	4619      	mov	r1, r3
 800173a:	4610      	mov	r0, r2
 800173c:	f000 fa26 	bl	8001b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d122      	bne.n	80017f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d11b      	bne.n	80017f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f06f 0202 	mvn.w	r2, #2
 80017c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f9ba 	bl	8001b56 <HAL_TIM_IC_CaptureCallback>
 80017e2:	e005      	b.n	80017f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f9ad 	bl	8001b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f9bc 	bl	8001b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b04      	cmp	r3, #4
 8001802:	d122      	bne.n	800184a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b04      	cmp	r3, #4
 8001810:	d11b      	bne.n	800184a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f06f 0204 	mvn.w	r2, #4
 800181a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2202      	movs	r2, #2
 8001820:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f990 	bl	8001b56 <HAL_TIM_IC_CaptureCallback>
 8001836:	e005      	b.n	8001844 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f983 	bl	8001b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f992 	bl	8001b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b08      	cmp	r3, #8
 8001856:	d122      	bne.n	800189e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b08      	cmp	r3, #8
 8001864:	d11b      	bne.n	800189e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f06f 0208 	mvn.w	r2, #8
 800186e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2204      	movs	r2, #4
 8001874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f966 	bl	8001b56 <HAL_TIM_IC_CaptureCallback>
 800188a:	e005      	b.n	8001898 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f959 	bl	8001b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f968 	bl	8001b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	f003 0310 	and.w	r3, r3, #16
 80018a8:	2b10      	cmp	r3, #16
 80018aa:	d122      	bne.n	80018f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	2b10      	cmp	r3, #16
 80018b8:	d11b      	bne.n	80018f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f06f 0210 	mvn.w	r2, #16
 80018c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2208      	movs	r2, #8
 80018c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f93c 	bl	8001b56 <HAL_TIM_IC_CaptureCallback>
 80018de:	e005      	b.n	80018ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f92f 	bl	8001b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f93e 	bl	8001b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d10e      	bne.n	800191e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b01      	cmp	r3, #1
 800190c:	d107      	bne.n	800191e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f06f 0201 	mvn.w	r2, #1
 8001916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f90a 	bl	8001b32 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001928:	2b80      	cmp	r3, #128	; 0x80
 800192a:	d10e      	bne.n	800194a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	2b80      	cmp	r3, #128	; 0x80
 8001938:	d107      	bne.n	800194a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 fa80 	bl	8001e4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001954:	2b40      	cmp	r3, #64	; 0x40
 8001956:	d10e      	bne.n	8001976 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001962:	2b40      	cmp	r3, #64	; 0x40
 8001964:	d107      	bne.n	8001976 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800196e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f902 	bl	8001b7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f003 0320 	and.w	r3, r3, #32
 8001980:	2b20      	cmp	r3, #32
 8001982:	d10e      	bne.n	80019a2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f003 0320 	and.w	r3, r3, #32
 800198e:	2b20      	cmp	r3, #32
 8001990:	d107      	bne.n	80019a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f06f 0220 	mvn.w	r2, #32
 800199a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 fa4b 	bl	8001e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_TIM_ConfigClockSource+0x18>
 80019be:	2302      	movs	r3, #2
 80019c0:	e0b3      	b.n	8001b2a <HAL_TIM_ConfigClockSource+0x180>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2202      	movs	r2, #2
 80019ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80019e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019e8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019fa:	d03e      	beq.n	8001a7a <HAL_TIM_ConfigClockSource+0xd0>
 80019fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a00:	f200 8087 	bhi.w	8001b12 <HAL_TIM_ConfigClockSource+0x168>
 8001a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a08:	f000 8085 	beq.w	8001b16 <HAL_TIM_ConfigClockSource+0x16c>
 8001a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a10:	d87f      	bhi.n	8001b12 <HAL_TIM_ConfigClockSource+0x168>
 8001a12:	2b70      	cmp	r3, #112	; 0x70
 8001a14:	d01a      	beq.n	8001a4c <HAL_TIM_ConfigClockSource+0xa2>
 8001a16:	2b70      	cmp	r3, #112	; 0x70
 8001a18:	d87b      	bhi.n	8001b12 <HAL_TIM_ConfigClockSource+0x168>
 8001a1a:	2b60      	cmp	r3, #96	; 0x60
 8001a1c:	d050      	beq.n	8001ac0 <HAL_TIM_ConfigClockSource+0x116>
 8001a1e:	2b60      	cmp	r3, #96	; 0x60
 8001a20:	d877      	bhi.n	8001b12 <HAL_TIM_ConfigClockSource+0x168>
 8001a22:	2b50      	cmp	r3, #80	; 0x50
 8001a24:	d03c      	beq.n	8001aa0 <HAL_TIM_ConfigClockSource+0xf6>
 8001a26:	2b50      	cmp	r3, #80	; 0x50
 8001a28:	d873      	bhi.n	8001b12 <HAL_TIM_ConfigClockSource+0x168>
 8001a2a:	2b40      	cmp	r3, #64	; 0x40
 8001a2c:	d058      	beq.n	8001ae0 <HAL_TIM_ConfigClockSource+0x136>
 8001a2e:	2b40      	cmp	r3, #64	; 0x40
 8001a30:	d86f      	bhi.n	8001b12 <HAL_TIM_ConfigClockSource+0x168>
 8001a32:	2b30      	cmp	r3, #48	; 0x30
 8001a34:	d064      	beq.n	8001b00 <HAL_TIM_ConfigClockSource+0x156>
 8001a36:	2b30      	cmp	r3, #48	; 0x30
 8001a38:	d86b      	bhi.n	8001b12 <HAL_TIM_ConfigClockSource+0x168>
 8001a3a:	2b20      	cmp	r3, #32
 8001a3c:	d060      	beq.n	8001b00 <HAL_TIM_ConfigClockSource+0x156>
 8001a3e:	2b20      	cmp	r3, #32
 8001a40:	d867      	bhi.n	8001b12 <HAL_TIM_ConfigClockSource+0x168>
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d05c      	beq.n	8001b00 <HAL_TIM_ConfigClockSource+0x156>
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d05a      	beq.n	8001b00 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001a4a:	e062      	b.n	8001b12 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	6899      	ldr	r1, [r3, #8]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	f000 f96f 	bl	8001d3e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	609a      	str	r2, [r3, #8]
      break;
 8001a78:	e04e      	b.n	8001b18 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	6899      	ldr	r1, [r3, #8]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f000 f958 	bl	8001d3e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a9c:	609a      	str	r2, [r3, #8]
      break;
 8001a9e:	e03b      	b.n	8001b18 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	461a      	mov	r2, r3
 8001aae:	f000 f8cf 	bl	8001c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2150      	movs	r1, #80	; 0x50
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 f926 	bl	8001d0a <TIM_ITRx_SetConfig>
      break;
 8001abe:	e02b      	b.n	8001b18 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	461a      	mov	r2, r3
 8001ace:	f000 f8ed 	bl	8001cac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2160      	movs	r1, #96	; 0x60
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 f916 	bl	8001d0a <TIM_ITRx_SetConfig>
      break;
 8001ade:	e01b      	b.n	8001b18 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	6859      	ldr	r1, [r3, #4]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	461a      	mov	r2, r3
 8001aee:	f000 f8af 	bl	8001c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2140      	movs	r1, #64	; 0x40
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 f906 	bl	8001d0a <TIM_ITRx_SetConfig>
      break;
 8001afe:	e00b      	b.n	8001b18 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	f000 f8fd 	bl	8001d0a <TIM_ITRx_SetConfig>
        break;
 8001b10:	e002      	b.n	8001b18 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001b12:	bf00      	nop
 8001b14:	e000      	b.n	8001b18 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001b16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a29      	ldr	r2, [pc, #164]	; (8001c44 <TIM_Base_SetConfig+0xb8>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d00b      	beq.n	8001bbc <TIM_Base_SetConfig+0x30>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001baa:	d007      	beq.n	8001bbc <TIM_Base_SetConfig+0x30>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a26      	ldr	r2, [pc, #152]	; (8001c48 <TIM_Base_SetConfig+0xbc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d003      	beq.n	8001bbc <TIM_Base_SetConfig+0x30>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a25      	ldr	r2, [pc, #148]	; (8001c4c <TIM_Base_SetConfig+0xc0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d108      	bne.n	8001bce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a1c      	ldr	r2, [pc, #112]	; (8001c44 <TIM_Base_SetConfig+0xb8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00b      	beq.n	8001bee <TIM_Base_SetConfig+0x62>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bdc:	d007      	beq.n	8001bee <TIM_Base_SetConfig+0x62>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a19      	ldr	r2, [pc, #100]	; (8001c48 <TIM_Base_SetConfig+0xbc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d003      	beq.n	8001bee <TIM_Base_SetConfig+0x62>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a18      	ldr	r2, [pc, #96]	; (8001c4c <TIM_Base_SetConfig+0xc0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d108      	bne.n	8001c00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <TIM_Base_SetConfig+0xb8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d103      	bne.n	8001c34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	615a      	str	r2, [r3, #20]
}
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	40012c00 	.word	0x40012c00
 8001c48:	40000400 	.word	0x40000400
 8001c4c:	40000800 	.word	0x40000800

08001c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	f023 0201 	bic.w	r2, r3, #1
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f023 030a 	bic.w	r3, r3, #10
 8001c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	621a      	str	r2, [r3, #32]
}
 8001ca2:	bf00      	nop
 8001ca4:	371c      	adds	r7, #28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	f023 0210 	bic.w	r2, r3, #16
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001cd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	031b      	lsls	r3, r3, #12
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001ce8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	621a      	str	r2, [r3, #32]
}
 8001d00:	bf00      	nop
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	f043 0307 	orr.w	r3, r3, #7
 8001d2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	609a      	str	r2, [r3, #8]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b087      	sub	sp, #28
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	021a      	lsls	r2, r3, #8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	609a      	str	r2, [r3, #8]
}
 8001d72:	bf00      	nop
 8001d74:	371c      	adds	r7, #28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e046      	b.n	8001e22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a16      	ldr	r2, [pc, #88]	; (8001e2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d00e      	beq.n	8001df6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de0:	d009      	beq.n	8001df6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d004      	beq.n	8001df6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a10      	ldr	r2, [pc, #64]	; (8001e34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d10c      	bne.n	8001e10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	40012c00 	.word	0x40012c00
 8001e30:	40000400 	.word	0x40000400
 8001e34:	40000800 	.word	0x40000800

08001e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e03f      	b.n	8001eee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe fb68 	bl	8000558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2224      	movs	r2, #36	; 0x24
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fb49 	bl	8002538 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ec4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ed4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10d      	bne.n	8001f4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_UART_IRQHandler+0x52>
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fa4f 	bl	80023e6 <UART_Receive_IT>
      return;
 8001f48:	e17b      	b.n	8002242 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80b1 	beq.w	80020b4 <HAL_UART_IRQHandler+0x1bc>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <HAL_UART_IRQHandler+0x70>
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80a6 	beq.w	80020b4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <HAL_UART_IRQHandler+0x90>
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_UART_IRQHandler+0xb0>
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f043 0202 	orr.w	r2, r3, #2
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_UART_IRQHandler+0xd0>
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f043 0204 	orr.w	r2, r3, #4
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00f      	beq.n	8001ff2 <HAL_UART_IRQHandler+0xfa>
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d104      	bne.n	8001fe6 <HAL_UART_IRQHandler+0xee>
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f043 0208 	orr.w	r2, r3, #8
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 811e 	beq.w	8002238 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b00      	cmp	r3, #0
 8002004:	d007      	beq.n	8002016 <HAL_UART_IRQHandler+0x11e>
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f9e8 	bl	80023e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf14      	ite	ne
 8002024:	2301      	movne	r3, #1
 8002026:	2300      	moveq	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d102      	bne.n	800203e <HAL_UART_IRQHandler+0x146>
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d031      	beq.n	80020a2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f92a 	bl	8002298 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	d023      	beq.n	800209a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002060:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002066:	2b00      	cmp	r3, #0
 8002068:	d013      	beq.n	8002092 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206e:	4a76      	ldr	r2, [pc, #472]	; (8002248 <HAL_UART_IRQHandler+0x350>)
 8002070:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fcf2 	bl	8000a60 <HAL_DMA_Abort_IT>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d016      	beq.n	80020b0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800208c:	4610      	mov	r0, r2
 800208e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002090:	e00e      	b.n	80020b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8ec 	bl	8002270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002098:	e00a      	b.n	80020b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f8e8 	bl	8002270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020a0:	e006      	b.n	80020b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8e4 	bl	8002270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80020ae:	e0c3      	b.n	8002238 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020b0:	bf00      	nop
    return;
 80020b2:	e0c1      	b.n	8002238 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	f040 80a1 	bne.w	8002200 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 809b 	beq.w	8002200 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 8095 	beq.w	8002200 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d04e      	beq.n	8002198 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002104:	8a3b      	ldrh	r3, [r7, #16]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8098 	beq.w	800223c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002110:	8a3a      	ldrh	r2, [r7, #16]
 8002112:	429a      	cmp	r2, r3
 8002114:	f080 8092 	bcs.w	800223c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	8a3a      	ldrh	r2, [r7, #16]
 800211c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	2b20      	cmp	r3, #32
 8002126:	d02b      	beq.n	8002180 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002136:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002156:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0210 	bic.w	r2, r2, #16
 8002174:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fc35 	bl	80009ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002188:	b29b      	uxth	r3, r3
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	b29b      	uxth	r3, r3
 800218e:	4619      	mov	r1, r3
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f876 	bl	8002282 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002196:	e051      	b.n	800223c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d047      	beq.n	8002240 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80021b0:	8a7b      	ldrh	r3, [r7, #18]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d044      	beq.n	8002240 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021c4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0201 	bic.w	r2, r2, #1
 80021d4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0210 	bic.w	r2, r2, #16
 80021f2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021f4:	8a7b      	ldrh	r3, [r7, #18]
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f842 	bl	8002282 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80021fe:	e01f      	b.n	8002240 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <HAL_UART_IRQHandler+0x324>
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f87f 	bl	8002318 <UART_Transmit_IT>
    return;
 800221a:	e012      	b.n	8002242 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00d      	beq.n	8002242 <HAL_UART_IRQHandler+0x34a>
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f8c0 	bl	80023b6 <UART_EndTransmit_IT>
    return;
 8002236:	e004      	b.n	8002242 <HAL_UART_IRQHandler+0x34a>
    return;
 8002238:	bf00      	nop
 800223a:	e002      	b.n	8002242 <HAL_UART_IRQHandler+0x34a>
      return;
 800223c:	bf00      	nop
 800223e:	e000      	b.n	8002242 <HAL_UART_IRQHandler+0x34a>
      return;
 8002240:	bf00      	nop
  }
}
 8002242:	3728      	adds	r7, #40	; 0x28
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	080022f1 	.word	0x080022f1

0800224c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr

08002282 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	460b      	mov	r3, r1
 800228c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d107      	bne.n	80022d8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0210 	bic.w	r2, r2, #16
 80022d6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f7ff ffb0 	bl	8002270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b21      	cmp	r3, #33	; 0x21
 800232a:	d13e      	bne.n	80023aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002334:	d114      	bne.n	8002360 <UART_Transmit_IT+0x48>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d110      	bne.n	8002360 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002352:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	1c9a      	adds	r2, r3, #2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	621a      	str	r2, [r3, #32]
 800235e:	e008      	b.n	8002372 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	1c59      	adds	r1, r3, #1
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6211      	str	r1, [r2, #32]
 800236a:	781a      	ldrb	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29b      	uxth	r3, r3
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	4619      	mov	r1, r3
 8002380:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10f      	bne.n	80023a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002394:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e000      	b.n	80023ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023aa:	2302      	movs	r3, #2
  }
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff ff38 	bl	800224c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b22      	cmp	r3, #34	; 0x22
 80023f8:	f040 8099 	bne.w	800252e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002404:	d117      	bne.n	8002436 <UART_Receive_IT+0x50>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d113      	bne.n	8002436 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	b29b      	uxth	r3, r3
 8002420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002424:	b29a      	uxth	r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	1c9a      	adds	r2, r3, #2
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
 8002434:	e026      	b.n	8002484 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800243c:	2300      	movs	r3, #0
 800243e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002448:	d007      	beq.n	800245a <UART_Receive_IT+0x74>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10a      	bne.n	8002468 <UART_Receive_IT+0x82>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	e008      	b.n	800247a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002474:	b2da      	uxtb	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002488:	b29b      	uxth	r3, r3
 800248a:	3b01      	subs	r3, #1
 800248c:	b29b      	uxth	r3, r3
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	4619      	mov	r1, r3
 8002492:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002494:	2b00      	cmp	r3, #0
 8002496:	d148      	bne.n	800252a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0220 	bic.w	r2, r2, #32
 80024a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d123      	bne.n	8002520 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0210 	bic.w	r2, r2, #16
 80024ec:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	2b10      	cmp	r3, #16
 80024fa:	d10a      	bne.n	8002512 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002516:	4619      	mov	r1, r3
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff feb2 	bl	8002282 <HAL_UARTEx_RxEventCallback>
 800251e:	e002      	b.n	8002526 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff fe9c 	bl	800225e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e002      	b.n	8002530 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	e000      	b.n	8002530 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800252e:	2302      	movs	r3, #2
  }
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	4313      	orrs	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002572:	f023 030c 	bic.w	r3, r3, #12
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	68b9      	ldr	r1, [r7, #8]
 800257c:	430b      	orrs	r3, r1
 800257e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a2c      	ldr	r2, [pc, #176]	; (800264c <UART_SetConfig+0x114>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d103      	bne.n	80025a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025a0:	f7ff f87a 	bl	8001698 <HAL_RCC_GetPCLK2Freq>
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	e002      	b.n	80025ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025a8:	f7ff f862 	bl	8001670 <HAL_RCC_GetPCLK1Freq>
 80025ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	009a      	lsls	r2, r3, #2
 80025b8:	441a      	add	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	4a22      	ldr	r2, [pc, #136]	; (8002650 <UART_SetConfig+0x118>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	0119      	lsls	r1, r3, #4
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	009a      	lsls	r2, r3, #2
 80025d8:	441a      	add	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80025e4:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <UART_SetConfig+0x118>)
 80025e6:	fba3 0302 	umull	r0, r3, r3, r2
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	2064      	movs	r0, #100	; 0x64
 80025ee:	fb00 f303 	mul.w	r3, r0, r3
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	3332      	adds	r3, #50	; 0x32
 80025f8:	4a15      	ldr	r2, [pc, #84]	; (8002650 <UART_SetConfig+0x118>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002604:	4419      	add	r1, r3
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	009a      	lsls	r2, r3, #2
 8002610:	441a      	add	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fbb2 f2f3 	udiv	r2, r2, r3
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <UART_SetConfig+0x118>)
 800261e:	fba3 0302 	umull	r0, r3, r3, r2
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	2064      	movs	r0, #100	; 0x64
 8002626:	fb00 f303 	mul.w	r3, r0, r3
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	3332      	adds	r3, #50	; 0x32
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <UART_SetConfig+0x118>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	f003 020f 	and.w	r2, r3, #15
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	440a      	add	r2, r1
 8002642:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40013800 	.word	0x40013800
 8002650:	51eb851f 	.word	0x51eb851f

08002654 <__libc_init_array>:
 8002654:	b570      	push	{r4, r5, r6, lr}
 8002656:	2600      	movs	r6, #0
 8002658:	4d0c      	ldr	r5, [pc, #48]	; (800268c <__libc_init_array+0x38>)
 800265a:	4c0d      	ldr	r4, [pc, #52]	; (8002690 <__libc_init_array+0x3c>)
 800265c:	1b64      	subs	r4, r4, r5
 800265e:	10a4      	asrs	r4, r4, #2
 8002660:	42a6      	cmp	r6, r4
 8002662:	d109      	bne.n	8002678 <__libc_init_array+0x24>
 8002664:	f000 f822 	bl	80026ac <_init>
 8002668:	2600      	movs	r6, #0
 800266a:	4d0a      	ldr	r5, [pc, #40]	; (8002694 <__libc_init_array+0x40>)
 800266c:	4c0a      	ldr	r4, [pc, #40]	; (8002698 <__libc_init_array+0x44>)
 800266e:	1b64      	subs	r4, r4, r5
 8002670:	10a4      	asrs	r4, r4, #2
 8002672:	42a6      	cmp	r6, r4
 8002674:	d105      	bne.n	8002682 <__libc_init_array+0x2e>
 8002676:	bd70      	pop	{r4, r5, r6, pc}
 8002678:	f855 3b04 	ldr.w	r3, [r5], #4
 800267c:	4798      	blx	r3
 800267e:	3601      	adds	r6, #1
 8002680:	e7ee      	b.n	8002660 <__libc_init_array+0xc>
 8002682:	f855 3b04 	ldr.w	r3, [r5], #4
 8002686:	4798      	blx	r3
 8002688:	3601      	adds	r6, #1
 800268a:	e7f2      	b.n	8002672 <__libc_init_array+0x1e>
 800268c:	080026ec 	.word	0x080026ec
 8002690:	080026ec 	.word	0x080026ec
 8002694:	080026ec 	.word	0x080026ec
 8002698:	080026f0 	.word	0x080026f0

0800269c <memset>:
 800269c:	4603      	mov	r3, r0
 800269e:	4402      	add	r2, r0
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d100      	bne.n	80026a6 <memset+0xa>
 80026a4:	4770      	bx	lr
 80026a6:	f803 1b01 	strb.w	r1, [r3], #1
 80026aa:	e7f9      	b.n	80026a0 <memset+0x4>

080026ac <_init>:
 80026ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ae:	bf00      	nop
 80026b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b2:	bc08      	pop	{r3}
 80026b4:	469e      	mov	lr, r3
 80026b6:	4770      	bx	lr

080026b8 <_fini>:
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ba:	bf00      	nop
 80026bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026be:	bc08      	pop	{r3}
 80026c0:	469e      	mov	lr, r3
 80026c2:	4770      	bx	lr
